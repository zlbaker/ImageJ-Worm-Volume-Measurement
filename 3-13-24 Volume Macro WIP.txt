//Choose where you want the folder to be taken from
input = getDirectory("What Folder Are Images Stored in?");


//Choose where you want the results to be saved
output = getDirectory("Where would you like the results saved to?");


//Select Which Image is the Appropriate Scale Bar
waitForUser("After Hitting \"Okay\", Select Which Image Contains the Appropriate Scale Bar");
open("");
scaletitle = getTitle();


//Get list of files in the folder and set it so that
//each image is opened during analysis
list = getFileList(input);

lengthmin = list.length - 1;
ultcount = 0

//Figuring Out if List is Odd or Even and "Telling"
//Program how many times to repeat code

rep = 0;
for (i = list.length; i > 1; i = i/2) {
rep = rep + 1;
}

if (list.length % 2 == 0){
	rep = rep;
	odd = 0;
	} else{
		rep = rep + 1;
		odd = 1;
	}


//Setting up the arrays that will be ued to name files later
alp = newArray("a","b","c","d","e","f","g","h","i",
				"j","k","l","m","n","o","p","q","r",
				"s","t","u","v","w","x","y","z");


//For loop that opens all of the images
for (i = 0; i < list.length; i++) {
	open(input + list[i]);
	//saveAs("Tiff", output + alp[count]  + ".tif");
}



//Allows User to Choose the Decrease in Resolution for all Images
newdpi = getString("To What DPI Would You Like to Scale your Images?");
selectImage(scaletitle);
run("Scale to DPI", "dpi=" + newdpi + " width=1 height=1 interpolation=Bilinear average create");
scaletitle = getTitle();
Image.removeScale();


//Selects scale image and allows user to outline scale
selectImage(scaletitle);
setTool("line");
waitForUser("Use the line tool to create a line from one point of the scale bar to another");
waitForUser("Use the \"Set Scale\" tool to set the scale appropriately");



//For Each Image in the Folder, Perform Ridge Detection, Calculate Volume, and 
//Save Measurements to the Array "volumelist"
volumelist = newArray(list.length);
for (item = 0; item < list.length; item++) {
	selectImage(list[item]);
    run("8-bit");
    
    
    //NOTE: The maximum Line Width that the Ridge Detection Tool accepts is 10 pixels
    //As such, any pictures whose resolution is too high will need to be reduced
    linewidth = "10";
    run("Ridge Detection", "line_width=" + linewidth + " high_contrast=100 low_contrast=0 darkline correct_position estimate_width extend_line displayresults add_to_manager method_for_overlap_resolution=NONE sigma=3.39 lower_threshold=0.85 upper_threshold=1.36 minimum_line_length=0 maximum=0");
    
    
    //Gets the Line Length and calculates the Average Distance of a measurment
    //Collection point
    avglength = getResult("Length", 0)/nResults;
    
    
    //Gathers all Width Estimates from the Ridge Detection Tool, Stores in "widthlist" array
    widthlist = newArray(nResults);
    for (result = 0; result < nResults; result++) {
    	tempresult = getResult("Line width", result);
    	widthlist[result] = tempresult;	
    }


	//Use the length and width Measurements Given Earlier to calculate volumes
    volume = 0;
    for (wid = 0; wid < widthlist.length; wid++1){
    	volume = volume + Math.sqr(widthlist[wid]/2) * avglength * 3.14159;
    }

    volumelist[item] = volume;
    
    run("Clear Results");
    
    /////////////////////////////////////////////////////////////////////////
    //OLD CODE//
    //////////////////////////////////////////////////////////////////////
    //tol = 100;
    //setTool("wand");
    //run("Wand Tool...", "tolerance=" + tol + " mode=Legacy");
	//waitForUser("Outline the Worm Using the Wand Tool");
	//run("Set Measurements...", "area perimeter redirect=None decimal=3");
	//run("Measure");
	//wormarea = getResult("Area", -1);
	//setTool("line");
	//waitForUser("Draw a Line Between Two Opposite Chitae");
    //for(i = 0; i <= wormareaEX; i++) {    	}
    /////////////////////////////////////////////////////////
    //OLD CODE//
    /////////////////////////////////////////////////////////
    
}

run("Close All");


Array.show("title", volumelist);